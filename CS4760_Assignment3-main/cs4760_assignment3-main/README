Aj Nobs
03/06/2021
CS 4760 - Assignment 3 -Semaphores and Message Passing
/classes/OS/nobs/nobs/nobs.3
hoare.cs.umsl.edu / 134.124.30.128
Project Files: monitor.c monitor.h statMon.c statMon.h consumer.c consumer.h producer.c producer.h Makefile README

Implementation:
1)  Get a Makefile that compiles the two source files.
>   COMPLETE

2)  Have your main executable read in the command line arguments and output the values to your screen (and ensure-h displays useful results).
>	COMPLETE

3)  Design the producer and consumer executables.
>	COMPLETE

4)  Have monitor allocate shared memory, use it, then deallocate it.  Make sure to check all possible error returns.
>	COMPLETE

5)  Design the monitor functions as a separate source/object. Move the object file into a static library using ar command. Modify Makefile to access the 
    functions in the library.
>	INCOMPLETE

6)  Get monitor to fork and exec producers and consumers. Have the children output any information passed from monitor and then the value of the 
    clock to test for correct launch. monitor should wait for children to terminate and then output the value of the clock at that time.
>	INCOMPLETE

7)  Put in the signal handling to terminate after specified number of seconds. A good idea to test this is to simply have the child go into an infinite loop so 
    monitor will not ever terminate normally. Once this is working have it catch Ctrl-c and free up the shared memory, send a kill signal to the child and then 
    terminate itself.
>	INCOMPLETE

8)  Set up the code to fork multiple child processes until the specific limits.
>	INCOMPLETE


Functionality:
Can parse command line.  Can allocate and deallocate semaphores.  Basic signal handling should be functional as well.  Basic fork() functionality is working.

Known Issues:
Logger and time functions not working with any reliability. Exec doesn't seem to be working.


INVOCATION:
monitor [-h] [-o logfile] [-p m] [-c n] [-t time]

-h          Describe how the project should be run and then, terminate.
-o logfile  Name of the file to save logs; default: logfile
-p m        Number of producers; default: m=2
-c n        Number of consumers; default: n=6
-t time     The time in seconds after which the process will terminate, even if it has not finished; default: 100